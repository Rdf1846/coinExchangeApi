package art.coinExchangeApi.coinExchangeApi.controller;

import art.coinExchangeApi.coinExchangeApi.customResponseEntity.BuyerCustomResponseEntity;
import art.coinExchangeApi.coinExchangeApi.dto.BuyerDto;
import art.coinExchangeApi.coinExchangeApi.dto.SellerDto;
import art.coinExchangeApi.coinExchangeApi.dto.UserDto;
import art.coinExchangeApi.coinExchangeApi.entity.UserDetailsEntity;
import art.coinExchangeApi.coinExchangeApi.service.CoinExchangeService;
import art.coinExchangeApi.coinExchangeApi.service.EmailService;
import art.coinExchangeApi.coinExchangeApi.service.OtpService;
import art.coinExchangeApi.coinExchangeApi.service.SmsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
public class CoinExchangeController {

    private CoinExchangeService coinExchangeService;

    private OtpService otpService;

    private EmailService emailService;

    private SmsService smsService;

    @Autowired
    public CoinExchangeController(CoinExchangeService coinExchangeService, OtpService otpService, EmailService emailService,SmsService smsService ) {
        this.coinExchangeService = coinExchangeService;
        this.otpService = otpService;
        this.emailService = emailService;
        this.smsService = smsService;
    }

    @PostMapping("/sell-coins")
    public ResponseEntity<String> registerSeller(@RequestBody SellerDto sellerDto) {
        coinExchangeService.registerSeller(sellerDto);
        return ResponseEntity.ok("Your profile has been created successfully and added to our database. If we found any buyer, then we will share your profile with them so that they can contact you directly! Thanks for selling");
    }

    @PostMapping("/registerUser")
    public ResponseEntity<String> registerUserDetails(@RequestBody UserDto userDto) {
        coinExchangeService.registerUserDetails(userDto);
        return ResponseEntity.ok("Your profile has been created successfully and added to our database. Thanks for sign up");
    }

    @PostMapping("/buy-coins/sellerList")
    public ResponseEntity<BuyerCustomResponseEntity<BuyerDto, List<SellerDto>>> registerBuyerAndFetchSellerList(@RequestBody BuyerDto buyerDto)
    {

        BuyerDto buyerDto1 = coinExchangeService.registerBuyer(buyerDto);
            List<SellerDto> sellerDtoList = coinExchangeService.findSellers(buyerDto1.getBuyerCoinInfoEntity());
            BuyerCustomResponseEntity<BuyerDto, List<SellerDto>> customResponse = new BuyerCustomResponseEntity<>(buyerDto1, sellerDtoList);

            return ResponseEntity.ok(customResponse);
    }

    @PostMapping("/generateEmailOtp")
    public ResponseEntity<String> generateOtpEmail(@RequestBody Map<String, String> request) {
        String email = request.get("email"); //fetching user email
        String otp = otpService.generateOtp(email); //Generating the otp using generateOtp method of otpService class
        emailService.sendOtpEmail(email, otp); //after otp generation, sending the otp to the provided email

        return ResponseEntity.ok("success");
    }

    @GetMapping("/verifyEmailOtp")
    public ResponseEntity<Boolean> verifyEmail(@RequestBody Map<String, String> request) {
        String email = request.get("email");
        String otp = request.get("otp");
        boolean isValid = otpService.verifyOtp(email, otp); //verifying the otp entered by the user is same as generated by the generateOtp method & entered withIn expected time
        return ResponseEntity.ok(isValid);
    }

    @PostMapping("/generateMobileOtp")
    public ResponseEntity<String> generateOtpMobile(@RequestBody Map<String, String> request) {
        String mobileNumber = request.get("mobileNumber");
        String otp = otpService.generateOtp(mobileNumber);
        smsService.sendOtpSms(mobileNumber, otp);
        return ResponseEntity.ok("success");
    }

    @GetMapping("/verifyMobileOtp")
    public ResponseEntity<Boolean> verifyMobile(@RequestBody Map<String, String> request) {
        String mobileNumber = request.get("mobileNumber");
        String otp = request.get("otp");
        boolean isValid = otpService.verifyOtp(mobileNumber, otp);
        return ResponseEntity.ok(isValid);
    }
}
